// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: newlogstorepb.proto

#include "newlogstorepb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace newlogstorepb {
constexpr LoadLogStoreReq::LoadLogStoreReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(int64_t{0}){}
struct LoadLogStoreReqDefaultTypeInternal {
  constexpr LoadLogStoreReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadLogStoreReqDefaultTypeInternal() {}
  union {
    LoadLogStoreReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadLogStoreReqDefaultTypeInternal _LoadLogStoreReq_default_instance_;
constexpr LoadLogStoreResp::LoadLogStoreResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , version_(int64_t{0})
  , epoch_(int64_t{0}){}
struct LoadLogStoreRespDefaultTypeInternal {
  constexpr LoadLogStoreRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoadLogStoreRespDefaultTypeInternal() {}
  union {
    LoadLogStoreResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoadLogStoreRespDefaultTypeInternal _LoadLogStoreResp_default_instance_;
constexpr OpenReq::OpenReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0})
  , flags_(0)
  , mode_(0u){}
struct OpenReqDefaultTypeInternal {
  constexpr OpenReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenReqDefaultTypeInternal() {}
  union {
    OpenReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenReqDefaultTypeInternal _OpenReq_default_instance_;
constexpr OpenResp::OpenResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0)
  , fd_(0){}
struct OpenRespDefaultTypeInternal {
  constexpr OpenRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OpenRespDefaultTypeInternal() {}
  union {
    OpenResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OpenRespDefaultTypeInternal _OpenResp_default_instance_;
constexpr CloseReq::CloseReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(int64_t{0})
  , fd_(0){}
struct CloseReqDefaultTypeInternal {
  constexpr CloseReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseReqDefaultTypeInternal() {}
  union {
    CloseReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseReqDefaultTypeInternal _CloseReq_default_instance_;
constexpr CloseResp::CloseResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct CloseRespDefaultTypeInternal {
  constexpr CloseRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CloseRespDefaultTypeInternal() {}
  union {
    CloseResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CloseRespDefaultTypeInternal _CloseResp_default_instance_;
constexpr PwriteReq::PwriteReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0})
  , seq_(int64_t{0})
  , size_(uint64_t{0u})
  , fd_(0)
  , write_mode_(0)
  , offset_(uint64_t{0u}){}
struct PwriteReqDefaultTypeInternal {
  constexpr PwriteReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PwriteReqDefaultTypeInternal() {}
  union {
    PwriteReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PwriteReqDefaultTypeInternal _PwriteReq_default_instance_;
constexpr PwriteResp::PwriteResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , size_(int64_t{0})
  , err_no_(0){}
struct PwriteRespDefaultTypeInternal {
  constexpr PwriteRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PwriteRespDefaultTypeInternal() {}
  union {
    PwriteResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PwriteRespDefaultTypeInternal _PwriteResp_default_instance_;
constexpr PreadReq::PreadReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(int64_t{0})
  , size_(uint64_t{0u})
  , offset_(uint64_t{0u})
  , fd_(0){}
struct PreadReqDefaultTypeInternal {
  constexpr PreadReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreadReqDefaultTypeInternal() {}
  union {
    PreadReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreadReqDefaultTypeInternal _PreadReq_default_instance_;
constexpr PreadResp::PreadResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buf_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ret_code_(int64_t{0})
  , size_(int64_t{0})
  , err_no_(0){}
struct PreadRespDefaultTypeInternal {
  constexpr PreadRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PreadRespDefaultTypeInternal() {}
  union {
    PreadResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PreadRespDefaultTypeInternal _PreadResp_default_instance_;
constexpr FallocateReq::FallocateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(int64_t{0})
  , fd_(0)
  , mode_(0)
  , offset_(int64_t{0})
  , len_(int64_t{0}){}
struct FallocateReqDefaultTypeInternal {
  constexpr FallocateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FallocateReqDefaultTypeInternal() {}
  union {
    FallocateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FallocateReqDefaultTypeInternal _FallocateReq_default_instance_;
constexpr FallocateResp::FallocateResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct FallocateRespDefaultTypeInternal {
  constexpr FallocateRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FallocateRespDefaultTypeInternal() {}
  union {
    FallocateResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FallocateRespDefaultTypeInternal _FallocateResp_default_instance_;
constexpr FtruncateReq::FtruncateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(int64_t{0})
  , len_(int64_t{0})
  , fd_(0){}
struct FtruncateReqDefaultTypeInternal {
  constexpr FtruncateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FtruncateReqDefaultTypeInternal() {}
  union {
    FtruncateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FtruncateReqDefaultTypeInternal _FtruncateReq_default_instance_;
constexpr FtruncateResp::FtruncateResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct FtruncateRespDefaultTypeInternal {
  constexpr FtruncateRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FtruncateRespDefaultTypeInternal() {}
  union {
    FtruncateResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FtruncateRespDefaultTypeInternal _FtruncateResp_default_instance_;
constexpr ScanDirReq::ScanDirReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dirname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0})
  , req_type_(0){}
struct ScanDirReqDefaultTypeInternal {
  constexpr ScanDirReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScanDirReqDefaultTypeInternal() {}
  union {
    ScanDirReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScanDirReqDefaultTypeInternal _ScanDirReq_default_instance_;
constexpr ScanDirResp1::ScanDirResp1(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct ScanDirResp1DefaultTypeInternal {
  constexpr ScanDirResp1DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScanDirResp1DefaultTypeInternal() {}
  union {
    ScanDirResp1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScanDirResp1DefaultTypeInternal _ScanDirResp1_default_instance_;
constexpr ScanDirResp::ScanDirResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resp1_(nullptr)
  , req_type_(0){}
struct ScanDirRespDefaultTypeInternal {
  constexpr ScanDirRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScanDirRespDefaultTypeInternal() {}
  union {
    ScanDirResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScanDirRespDefaultTypeInternal _ScanDirResp_default_instance_;
constexpr UnlinkReq::UnlinkReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0}){}
struct UnlinkReqDefaultTypeInternal {
  constexpr UnlinkReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnlinkReqDefaultTypeInternal() {}
  union {
    UnlinkReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnlinkReqDefaultTypeInternal _UnlinkReq_default_instance_;
constexpr UnlinkResp::UnlinkResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct UnlinkRespDefaultTypeInternal {
  constexpr UnlinkRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnlinkRespDefaultTypeInternal() {}
  union {
    UnlinkResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnlinkRespDefaultTypeInternal _UnlinkResp_default_instance_;
constexpr MkdirReq::MkdirReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0})
  , mode_(0u){}
struct MkdirReqDefaultTypeInternal {
  constexpr MkdirReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MkdirReqDefaultTypeInternal() {}
  union {
    MkdirReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MkdirReqDefaultTypeInternal _MkdirReq_default_instance_;
constexpr MkdirResp::MkdirResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct MkdirRespDefaultTypeInternal {
  constexpr MkdirRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MkdirRespDefaultTypeInternal() {}
  union {
    MkdirResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MkdirRespDefaultTypeInternal _MkdirResp_default_instance_;
constexpr RmdirReq::RmdirReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0}){}
struct RmdirReqDefaultTypeInternal {
  constexpr RmdirReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RmdirReqDefaultTypeInternal() {}
  union {
    RmdirReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RmdirReqDefaultTypeInternal _RmdirReq_default_instance_;
constexpr RmdirResp::RmdirResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct RmdirRespDefaultTypeInternal {
  constexpr RmdirRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RmdirRespDefaultTypeInternal() {}
  union {
    RmdirResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RmdirRespDefaultTypeInternal _RmdirResp_default_instance_;
constexpr StatReq::StatReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pathname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0}){}
struct StatReqDefaultTypeInternal {
  constexpr StatReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatReqDefaultTypeInternal() {}
  union {
    StatReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatReqDefaultTypeInternal _StatReq_default_instance_;
constexpr StatResp::StatResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0)
  , is_dir_(false)
  , st_size_(uint64_t{0u}){}
struct StatRespDefaultTypeInternal {
  constexpr StatRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StatRespDefaultTypeInternal() {}
  union {
    StatResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StatRespDefaultTypeInternal _StatResp_default_instance_;
constexpr RenameReq::RenameReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : oldpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , newpath_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0}){}
struct RenameReqDefaultTypeInternal {
  constexpr RenameReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenameReqDefaultTypeInternal() {}
  union {
    RenameReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenameReqDefaultTypeInternal _RenameReq_default_instance_;
constexpr RenameResp::RenameResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct RenameRespDefaultTypeInternal {
  constexpr RenameRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenameRespDefaultTypeInternal() {}
  union {
    RenameResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenameRespDefaultTypeInternal _RenameResp_default_instance_;
constexpr FsyncReq::FsyncReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(int64_t{0})
  , fd_(0){}
struct FsyncReqDefaultTypeInternal {
  constexpr FsyncReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FsyncReqDefaultTypeInternal() {}
  union {
    FsyncReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FsyncReqDefaultTypeInternal _FsyncReq_default_instance_;
constexpr FsyncResp::FsyncResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct FsyncRespDefaultTypeInternal {
  constexpr FsyncRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FsyncRespDefaultTypeInternal() {}
  union {
    FsyncResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FsyncRespDefaultTypeInternal _FsyncResp_default_instance_;
constexpr GetLogStoreInfoReq::GetLogStoreInfoReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(int64_t{0}){}
struct GetLogStoreInfoReqDefaultTypeInternal {
  constexpr GetLogStoreInfoReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLogStoreInfoReqDefaultTypeInternal() {}
  union {
    GetLogStoreInfoReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLogStoreInfoReqDefaultTypeInternal _GetLogStoreInfoReq_default_instance_;
constexpr GetLogStoreInfoResp::GetLogStoreInfoResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , memory_limit_(int64_t{0})
  , memory_used_(int64_t{0})
  , shm_limit_(int64_t{0})
  , shm_used_(int64_t{0}){}
struct GetLogStoreInfoRespDefaultTypeInternal {
  constexpr GetLogStoreInfoRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetLogStoreInfoRespDefaultTypeInternal() {}
  union {
    GetLogStoreInfoResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetLogStoreInfoRespDefaultTypeInternal _GetLogStoreInfoResp_default_instance_;
constexpr BatchFallocateReq::BatchFallocateReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dirname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , epoch_(int64_t{0})
  , count_(int64_t{0})
  , size_(int64_t{0}){}
struct BatchFallocateReqDefaultTypeInternal {
  constexpr BatchFallocateReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchFallocateReqDefaultTypeInternal() {}
  union {
    BatchFallocateReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchFallocateReqDefaultTypeInternal _BatchFallocateReq_default_instance_;
constexpr BatchFallocateResp::BatchFallocateResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_code_(int64_t{0})
  , err_no_(0){}
struct BatchFallocateRespDefaultTypeInternal {
  constexpr BatchFallocateRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchFallocateRespDefaultTypeInternal() {}
  union {
    BatchFallocateResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchFallocateRespDefaultTypeInternal _BatchFallocateResp_default_instance_;
}  // namespace newlogstorepb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_newlogstorepb_2eproto[33];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_newlogstorepb_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_newlogstorepb_2eproto = nullptr;

const uint32_t TableStruct_newlogstorepb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::LoadLogStoreReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::LoadLogStoreReq, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::LoadLogStoreResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::LoadLogStoreResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::LoadLogStoreResp, version_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::LoadLogStoreResp, epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenReq, pathname_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenReq, flags_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenReq, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenResp, err_no_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::OpenResp, fd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::CloseReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::CloseReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::CloseReq, fd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::CloseResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::CloseResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::CloseResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, seq_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, fd_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, buf_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, size_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, offset_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteReq, write_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteResp, err_no_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PwriteResp, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadReq, fd_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadReq, size_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadReq, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadResp, err_no_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadResp, buf_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::PreadResp, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateReq, fd_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateReq, mode_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateReq, offset_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateReq, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FallocateResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateReq, fd_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateReq, len_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FtruncateResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirReq, dirname_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirReq, req_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirResp1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirResp1, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirResp1, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirResp, req_type_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::ScanDirResp, resp1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::UnlinkReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::UnlinkReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::UnlinkReq, pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::UnlinkResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::UnlinkResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::UnlinkResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirReq, pathname_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirReq, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::MkdirResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RmdirReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RmdirReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RmdirReq, pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RmdirResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RmdirResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RmdirResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatReq, pathname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatResp, err_no_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatResp, is_dir_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::StatResp, st_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameReq, oldpath_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameReq, newpath_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::RenameResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FsyncReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FsyncReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FsyncReq, fd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FsyncResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FsyncResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::FsyncResp, err_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoReq, epoch_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoResp, memory_limit_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoResp, memory_used_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoResp, shm_limit_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::GetLogStoreInfoResp, shm_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateReq, epoch_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateReq, dirname_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateReq, count_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateReq, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateResp, ret_code_),
  PROTOBUF_FIELD_OFFSET(::newlogstorepb::BatchFallocateResp, err_no_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::newlogstorepb::LoadLogStoreReq)},
  { 7, -1, -1, sizeof(::newlogstorepb::LoadLogStoreResp)},
  { 16, -1, -1, sizeof(::newlogstorepb::OpenReq)},
  { 26, -1, -1, sizeof(::newlogstorepb::OpenResp)},
  { 35, -1, -1, sizeof(::newlogstorepb::CloseReq)},
  { 43, -1, -1, sizeof(::newlogstorepb::CloseResp)},
  { 51, -1, -1, sizeof(::newlogstorepb::PwriteReq)},
  { 64, -1, -1, sizeof(::newlogstorepb::PwriteResp)},
  { 73, -1, -1, sizeof(::newlogstorepb::PreadReq)},
  { 83, -1, -1, sizeof(::newlogstorepb::PreadResp)},
  { 93, -1, -1, sizeof(::newlogstorepb::FallocateReq)},
  { 104, -1, -1, sizeof(::newlogstorepb::FallocateResp)},
  { 112, -1, -1, sizeof(::newlogstorepb::FtruncateReq)},
  { 121, -1, -1, sizeof(::newlogstorepb::FtruncateResp)},
  { 129, -1, -1, sizeof(::newlogstorepb::ScanDirReq)},
  { 138, -1, -1, sizeof(::newlogstorepb::ScanDirResp1)},
  { 146, -1, -1, sizeof(::newlogstorepb::ScanDirResp)},
  { 154, -1, -1, sizeof(::newlogstorepb::UnlinkReq)},
  { 162, -1, -1, sizeof(::newlogstorepb::UnlinkResp)},
  { 170, -1, -1, sizeof(::newlogstorepb::MkdirReq)},
  { 179, -1, -1, sizeof(::newlogstorepb::MkdirResp)},
  { 187, -1, -1, sizeof(::newlogstorepb::RmdirReq)},
  { 195, -1, -1, sizeof(::newlogstorepb::RmdirResp)},
  { 203, -1, -1, sizeof(::newlogstorepb::StatReq)},
  { 211, -1, -1, sizeof(::newlogstorepb::StatResp)},
  { 221, -1, -1, sizeof(::newlogstorepb::RenameReq)},
  { 230, -1, -1, sizeof(::newlogstorepb::RenameResp)},
  { 238, -1, -1, sizeof(::newlogstorepb::FsyncReq)},
  { 246, -1, -1, sizeof(::newlogstorepb::FsyncResp)},
  { 254, -1, -1, sizeof(::newlogstorepb::GetLogStoreInfoReq)},
  { 261, -1, -1, sizeof(::newlogstorepb::GetLogStoreInfoResp)},
  { 272, -1, -1, sizeof(::newlogstorepb::BatchFallocateReq)},
  { 282, -1, -1, sizeof(::newlogstorepb::BatchFallocateResp)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_LoadLogStoreReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_LoadLogStoreResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_OpenReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_OpenResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_CloseReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_CloseResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_PwriteReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_PwriteResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_PreadReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_PreadResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_FallocateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_FallocateResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_FtruncateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_FtruncateResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_ScanDirReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_ScanDirResp1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_ScanDirResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_UnlinkReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_UnlinkResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_MkdirReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_MkdirResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_RmdirReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_RmdirResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_StatReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_StatResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_RenameReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_RenameResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_FsyncReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_FsyncResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_GetLogStoreInfoReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_GetLogStoreInfoResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_BatchFallocateReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::newlogstorepb::_BatchFallocateResp_default_instance_),
};

const char descriptor_table_protodef_newlogstorepb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023newlogstorepb.proto\022\rnewlogstorepb\"\"\n\017"
  "LoadLogStoreReq\022\017\n\007version\030\001 \001(\003\"D\n\020Load"
  "LogStoreResp\022\020\n\010ret_code\030\001 \001(\003\022\017\n\007versio"
  "n\030\002 \001(\003\022\r\n\005epoch\030\003 \001(\003\"G\n\007OpenReq\022\r\n\005epo"
  "ch\030\001 \001(\003\022\020\n\010pathname\030\002 \001(\t\022\r\n\005flags\030\003 \001("
  "\005\022\014\n\004mode\030\004 \001(\r\"8\n\010OpenResp\022\020\n\010ret_code\030"
  "\001 \001(\003\022\016\n\006err_no\030\002 \001(\005\022\n\n\002fd\030\003 \001(\005\"%\n\010Clo"
  "seReq\022\r\n\005epoch\030\001 \001(\003\022\n\n\002fd\030\002 \001(\005\"-\n\tClos"
  "eResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no\030\002 \001(\005\""
  "r\n\tPwriteReq\022\r\n\005epoch\030\001 \001(\003\022\013\n\003seq\030\002 \001(\003"
  "\022\n\n\002fd\030\003 \001(\005\022\013\n\003buf\030\004 \001(\014\022\014\n\004size\030\005 \001(\004\022"
  "\016\n\006offset\030\006 \001(\004\022\022\n\nwrite_mode\030\007 \001(\005\"<\n\nP"
  "writeResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no\030\002 "
  "\001(\005\022\014\n\004size\030\003 \001(\003\"C\n\010PreadReq\022\r\n\005epoch\030\001"
  " \001(\003\022\n\n\002fd\030\002 \001(\005\022\014\n\004size\030\003 \001(\004\022\016\n\006offset"
  "\030\004 \001(\004\"H\n\tPreadResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n"
  "\006err_no\030\002 \001(\005\022\013\n\003buf\030\003 \001(\014\022\014\n\004size\030\004 \001(\003"
  "\"T\n\014FallocateReq\022\r\n\005epoch\030\001 \001(\003\022\n\n\002fd\030\002 "
  "\001(\005\022\014\n\004mode\030\003 \001(\005\022\016\n\006offset\030\004 \001(\003\022\013\n\003len"
  "\030\005 \001(\003\"1\n\rFallocateResp\022\020\n\010ret_code\030\001 \001("
  "\003\022\016\n\006err_no\030\002 \001(\005\"6\n\014FtruncateReq\022\r\n\005epo"
  "ch\030\001 \001(\003\022\n\n\002fd\030\002 \001(\005\022\013\n\003len\030\003 \001(\003\"1\n\rFtr"
  "uncateResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no\030\002"
  " \001(\005\">\n\nScanDirReq\022\r\n\005epoch\030\001 \001(\003\022\017\n\007dir"
  "name\030\002 \001(\t\022\020\n\010req_type\030\003 \001(\005\"0\n\014ScanDirR"
  "esp1\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no\030\002 \001(\005\"K"
  "\n\013ScanDirResp\022\020\n\010req_type\030\001 \001(\005\022*\n\005resp1"
  "\030\002 \001(\0132\033.newlogstorepb.ScanDirResp1\",\n\tU"
  "nlinkReq\022\r\n\005epoch\030\001 \001(\003\022\020\n\010pathname\030\002 \001("
  "\t\".\n\nUnlinkResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err"
  "_no\030\002 \001(\005\"9\n\010MkdirReq\022\r\n\005epoch\030\001 \001(\003\022\020\n\010"
  "pathname\030\002 \001(\t\022\014\n\004mode\030\003 \001(\r\"-\n\tMkdirRes"
  "p\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no\030\002 \001(\005\"+\n\010R"
  "mdirReq\022\r\n\005epoch\030\001 \001(\003\022\020\n\010pathname\030\002 \001(\t"
  "\"-\n\tRmdirResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_n"
  "o\030\002 \001(\005\"*\n\007StatReq\022\r\n\005epoch\030\001 \001(\003\022\020\n\010pat"
  "hname\030\002 \001(\t\"M\n\010StatResp\022\020\n\010ret_code\030\001 \001("
  "\003\022\016\n\006err_no\030\002 \001(\005\022\016\n\006is_dir\030\003 \001(\010\022\017\n\007st_"
  "size\030\004 \001(\004\"<\n\tRenameReq\022\r\n\005epoch\030\001 \001(\003\022\017"
  "\n\007oldpath\030\002 \001(\t\022\017\n\007newpath\030\003 \001(\t\".\n\nRena"
  "meResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no\030\002 \001(\005"
  "\"%\n\010FsyncReq\022\r\n\005epoch\030\001 \001(\003\022\n\n\002fd\030\002 \001(\005\""
  "-\n\tFsyncResp\022\020\n\010ret_code\030\001 \001(\003\022\016\n\006err_no"
  "\030\002 \001(\005\"#\n\022GetLogStoreInfoReq\022\r\n\005epoch\030\001 "
  "\001(\003\"w\n\023GetLogStoreInfoResp\022\020\n\010ret_code\030\001"
  " \001(\003\022\024\n\014memory_limit\030\002 \001(\003\022\023\n\013memory_use"
  "d\030\003 \001(\003\022\021\n\tshm_limit\030\004 \001(\003\022\020\n\010shm_used\030\005"
  " \001(\003\"P\n\021BatchFallocateReq\022\r\n\005epoch\030\001 \001(\003"
  "\022\017\n\007dirname\030\002 \001(\t\022\r\n\005count\030\003 \001(\003\022\014\n\004size"
  "\030\004 \001(\003\"6\n\022BatchFallocateResp\022\020\n\010ret_code"
  "\030\001 \001(\003\022\016\n\006err_no\030\002 \001(\0052\274\010\n\013NewLogStore\022O"
  "\n\014LoadLogStore\022\036.newlogstorepb.LoadLogSt"
  "oreReq\032\037.newlogstorepb.LoadLogStoreResp\022"
  "7\n\004Open\022\026.newlogstorepb.OpenReq\032\027.newlog"
  "storepb.OpenResp\022:\n\005Close\022\027.newlogstorep"
  "b.CloseReq\032\030.newlogstorepb.CloseResp\022=\n\006"
  "Pwrite\022\030.newlogstorepb.PwriteReq\032\031.newlo"
  "gstorepb.PwriteResp\022:\n\005Pread\022\027.newlogsto"
  "repb.PreadReq\032\030.newlogstorepb.PreadResp\022"
  "F\n\tFallocate\022\033.newlogstorepb.FallocateRe"
  "q\032\034.newlogstorepb.FallocateResp\022F\n\tFtrun"
  "cate\022\033.newlogstorepb.FtruncateReq\032\034.newl"
  "ogstorepb.FtruncateResp\022@\n\007Scandir\022\031.new"
  "logstorepb.ScanDirReq\032\032.newlogstorepb.Sc"
  "anDirResp\022=\n\006Unlink\022\030.newlogstorepb.Unli"
  "nkReq\032\031.newlogstorepb.UnlinkResp\022:\n\005Mkdi"
  "r\022\027.newlogstorepb.MkdirReq\032\030.newlogstore"
  "pb.MkdirResp\022:\n\005Rmdir\022\027.newlogstorepb.Rm"
  "dirReq\032\030.newlogstorepb.RmdirResp\0227\n\004Stat"
  "\022\026.newlogstorepb.StatReq\032\027.newlogstorepb"
  ".StatResp\022=\n\006Rename\022\030.newlogstorepb.Rena"
  "meReq\032\031.newlogstorepb.RenameResp\022:\n\005Fsyn"
  "c\022\027.newlogstorepb.FsyncReq\032\030.newlogstore"
  "pb.FsyncResp\022X\n\017GetLogStoreInfo\022!.newlog"
  "storepb.GetLogStoreInfoReq\032\".newlogstore"
  "pb.GetLogStoreInfoResp\022U\n\016BatchFallocate"
  "\022 .newlogstorepb.BatchFallocateReq\032!.new"
  "logstorepb.BatchFallocateRespb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_newlogstorepb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_newlogstorepb_2eproto = {
  false, false, 3117, descriptor_table_protodef_newlogstorepb_2eproto, "newlogstorepb.proto",
  &descriptor_table_newlogstorepb_2eproto_once, nullptr, 0, 33,
  schemas, file_default_instances, TableStruct_newlogstorepb_2eproto::offsets,
  file_level_metadata_newlogstorepb_2eproto, file_level_enum_descriptors_newlogstorepb_2eproto, file_level_service_descriptors_newlogstorepb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_newlogstorepb_2eproto_getter() {
  return &descriptor_table_newlogstorepb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_newlogstorepb_2eproto(&descriptor_table_newlogstorepb_2eproto);
namespace newlogstorepb {

// ===================================================================

class LoadLogStoreReq::_Internal {
 public:
};

LoadLogStoreReq::LoadLogStoreReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.LoadLogStoreReq)
}
LoadLogStoreReq::LoadLogStoreReq(const LoadLogStoreReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.LoadLogStoreReq)
}

inline void LoadLogStoreReq::SharedCtor() {
version_ = int64_t{0};
}

LoadLogStoreReq::~LoadLogStoreReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.LoadLogStoreReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadLogStoreReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadLogStoreReq::ArenaDtor(void* object) {
  LoadLogStoreReq* _this = reinterpret_cast< LoadLogStoreReq* >(object);
  (void)_this;
}
void LoadLogStoreReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadLogStoreReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadLogStoreReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.LoadLogStoreReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadLogStoreReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadLogStoreReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.LoadLogStoreReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.LoadLogStoreReq)
  return target;
}

size_t LoadLogStoreReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.LoadLogStoreReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadLogStoreReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadLogStoreReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadLogStoreReq::GetClassData() const { return &_class_data_; }

void LoadLogStoreReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadLogStoreReq *>(to)->MergeFrom(
      static_cast<const LoadLogStoreReq &>(from));
}


void LoadLogStoreReq::MergeFrom(const LoadLogStoreReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.LoadLogStoreReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadLogStoreReq::CopyFrom(const LoadLogStoreReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.LoadLogStoreReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadLogStoreReq::IsInitialized() const {
  return true;
}

void LoadLogStoreReq::InternalSwap(LoadLogStoreReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadLogStoreReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[0]);
}

// ===================================================================

class LoadLogStoreResp::_Internal {
 public:
};

LoadLogStoreResp::LoadLogStoreResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.LoadLogStoreResp)
}
LoadLogStoreResp::LoadLogStoreResp(const LoadLogStoreResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(epoch_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.LoadLogStoreResp)
}

inline void LoadLogStoreResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&epoch_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(epoch_));
}

LoadLogStoreResp::~LoadLogStoreResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.LoadLogStoreResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LoadLogStoreResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LoadLogStoreResp::ArenaDtor(void* object) {
  LoadLogStoreResp* _this = reinterpret_cast< LoadLogStoreResp* >(object);
  (void)_this;
}
void LoadLogStoreResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoadLogStoreResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoadLogStoreResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.LoadLogStoreResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&epoch_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(epoch_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoadLogStoreResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 epoch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LoadLogStoreResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.LoadLogStoreResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int64 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_version(), target);
  }

  // int64 epoch = 3;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.LoadLogStoreResp)
  return target;
}

size_t LoadLogStoreResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.LoadLogStoreResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int64 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  // int64 epoch = 3;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoadLogStoreResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LoadLogStoreResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoadLogStoreResp::GetClassData() const { return &_class_data_; }

void LoadLogStoreResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LoadLogStoreResp *>(to)->MergeFrom(
      static_cast<const LoadLogStoreResp &>(from));
}


void LoadLogStoreResp::MergeFrom(const LoadLogStoreResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.LoadLogStoreResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoadLogStoreResp::CopyFrom(const LoadLogStoreResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.LoadLogStoreResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadLogStoreResp::IsInitialized() const {
  return true;
}

void LoadLogStoreResp::InternalSwap(LoadLogStoreResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoadLogStoreResp, epoch_)
      + sizeof(LoadLogStoreResp::epoch_)
      - PROTOBUF_FIELD_OFFSET(LoadLogStoreResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoadLogStoreResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[1]);
}

// ===================================================================

class OpenReq::_Internal {
 public:
};

OpenReq::OpenReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.OpenReq)
}
OpenReq::OpenReq(const OpenReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    pathname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pathname(),
      GetArenaForAllocation());
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.OpenReq)
}

inline void OpenReq::SharedCtor() {
pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(mode_));
}

OpenReq::~OpenReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.OpenReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpenReq::ArenaDtor(void* object) {
  OpenReq* _this = reinterpret_cast< OpenReq* >(object);
  (void)_this;
}
void OpenReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.OpenReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmpty();
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pathname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pathname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.OpenReq.pathname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.OpenReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.OpenReq.pathname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pathname(), target);
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_flags(), target);
  }

  // uint32 mode = 4;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.OpenReq)
  return target;
}

size_t OpenReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.OpenReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int32 flags = 3;
  if (this->_internal_flags() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  // uint32 mode = 4;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenReq::GetClassData() const { return &_class_data_; }

void OpenReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenReq *>(to)->MergeFrom(
      static_cast<const OpenReq &>(from));
}


void OpenReq::MergeFrom(const OpenReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.OpenReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenReq::CopyFrom(const OpenReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.OpenReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenReq::IsInitialized() const {
  return true;
}

void OpenReq::InternalSwap(OpenReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pathname_, lhs_arena,
      &other->pathname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenReq, mode_)
      + sizeof(OpenReq::mode_)
      - PROTOBUF_FIELD_OFFSET(OpenReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[2]);
}

// ===================================================================

class OpenResp::_Internal {
 public:
};

OpenResp::OpenResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.OpenResp)
}
OpenResp::OpenResp(const OpenResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.OpenResp)
}

inline void OpenResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(fd_));
}

OpenResp::~OpenResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.OpenResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OpenResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OpenResp::ArenaDtor(void* object) {
  OpenResp* _this = reinterpret_cast< OpenResp* >(object);
  (void)_this;
}
void OpenResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpenResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OpenResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.OpenResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpenResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OpenResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.OpenResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  // int32 fd = 3;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.OpenResp)
  return target;
}

size_t OpenResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.OpenResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  // int32 fd = 3;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OpenResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OpenResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OpenResp::GetClassData() const { return &_class_data_; }

void OpenResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OpenResp *>(to)->MergeFrom(
      static_cast<const OpenResp &>(from));
}


void OpenResp::MergeFrom(const OpenResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.OpenResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OpenResp::CopyFrom(const OpenResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.OpenResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenResp::IsInitialized() const {
  return true;
}

void OpenResp::InternalSwap(OpenResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpenResp, fd_)
      + sizeof(OpenResp::fd_)
      - PROTOBUF_FIELD_OFFSET(OpenResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpenResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[3]);
}

// ===================================================================

class CloseReq::_Internal {
 public:
};

CloseReq::CloseReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.CloseReq)
}
CloseReq::CloseReq(const CloseReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.CloseReq)
}

inline void CloseReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
}

CloseReq::~CloseReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.CloseReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseReq::ArenaDtor(void* object) {
  CloseReq* _this = reinterpret_cast< CloseReq* >(object);
  (void)_this;
}
void CloseReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.CloseReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.CloseReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.CloseReq)
  return target;
}

size_t CloseReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.CloseReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseReq::GetClassData() const { return &_class_data_; }

void CloseReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseReq *>(to)->MergeFrom(
      static_cast<const CloseReq &>(from));
}


void CloseReq::MergeFrom(const CloseReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.CloseReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseReq::CopyFrom(const CloseReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.CloseReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseReq::IsInitialized() const {
  return true;
}

void CloseReq::InternalSwap(CloseReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseReq, fd_)
      + sizeof(CloseReq::fd_)
      - PROTOBUF_FIELD_OFFSET(CloseReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[4]);
}

// ===================================================================

class CloseResp::_Internal {
 public:
};

CloseResp::CloseResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.CloseResp)
}
CloseResp::CloseResp(const CloseResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.CloseResp)
}

inline void CloseResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

CloseResp::~CloseResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.CloseResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CloseResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseResp::ArenaDtor(void* object) {
  CloseResp* _this = reinterpret_cast< CloseResp* >(object);
  (void)_this;
}
void CloseResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CloseResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.CloseResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.CloseResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.CloseResp)
  return target;
}

size_t CloseResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.CloseResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CloseResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseResp::GetClassData() const { return &_class_data_; }

void CloseResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CloseResp *>(to)->MergeFrom(
      static_cast<const CloseResp &>(from));
}


void CloseResp::MergeFrom(const CloseResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.CloseResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseResp::CopyFrom(const CloseResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.CloseResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseResp::IsInitialized() const {
  return true;
}

void CloseResp::InternalSwap(CloseResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseResp, err_no_)
      + sizeof(CloseResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(CloseResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[5]);
}

// ===================================================================

class PwriteReq::_Internal {
 public:
};

PwriteReq::PwriteReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.PwriteReq)
}
PwriteReq::PwriteReq(const PwriteReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buf().empty()) {
    buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buf(),
      GetArenaForAllocation());
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.PwriteReq)
}

inline void PwriteReq::SharedCtor() {
buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(offset_));
}

PwriteReq::~PwriteReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.PwriteReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PwriteReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PwriteReq::ArenaDtor(void* object) {
  PwriteReq* _this = reinterpret_cast< PwriteReq* >(object);
  (void)_this;
}
void PwriteReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PwriteReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PwriteReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.PwriteReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_.ClearToEmpty();
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(offset_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PwriteReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 write_mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          write_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PwriteReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.PwriteReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // int64 seq = 2;
  if (this->_internal_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seq(), target);
  }

  // int32 fd = 3;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_fd(), target);
  }

  // bytes buf = 4;
  if (!this->_internal_buf().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_buf(), target);
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_size(), target);
  }

  // uint64 offset = 6;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_offset(), target);
  }

  // int32 write_mode = 7;
  if (this->_internal_write_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_write_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.PwriteReq)
  return target;
}

size_t PwriteReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.PwriteReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buf = 4;
  if (!this->_internal_buf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int64 seq = 2;
  if (this->_internal_seq() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }

  // uint64 size = 5;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // int32 fd = 3;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  // int32 write_mode = 7;
  if (this->_internal_write_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_write_mode());
  }

  // uint64 offset = 6;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PwriteReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PwriteReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PwriteReq::GetClassData() const { return &_class_data_; }

void PwriteReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PwriteReq *>(to)->MergeFrom(
      static_cast<const PwriteReq &>(from));
}


void PwriteReq::MergeFrom(const PwriteReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.PwriteReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buf().empty()) {
    _internal_set_buf(from._internal_buf());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  if (from._internal_write_mode() != 0) {
    _internal_set_write_mode(from._internal_write_mode());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PwriteReq::CopyFrom(const PwriteReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.PwriteReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PwriteReq::IsInitialized() const {
  return true;
}

void PwriteReq::InternalSwap(PwriteReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buf_, lhs_arena,
      &other->buf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PwriteReq, offset_)
      + sizeof(PwriteReq::offset_)
      - PROTOBUF_FIELD_OFFSET(PwriteReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PwriteReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[6]);
}

// ===================================================================

class PwriteResp::_Internal {
 public:
};

PwriteResp::PwriteResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.PwriteResp)
}
PwriteResp::PwriteResp(const PwriteResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.PwriteResp)
}

inline void PwriteResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

PwriteResp::~PwriteResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.PwriteResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PwriteResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PwriteResp::ArenaDtor(void* object) {
  PwriteResp* _this = reinterpret_cast< PwriteResp* >(object);
  (void)_this;
}
void PwriteResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PwriteResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PwriteResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.PwriteResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PwriteResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PwriteResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.PwriteResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.PwriteResp)
  return target;
}

size_t PwriteResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.PwriteResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PwriteResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PwriteResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PwriteResp::GetClassData() const { return &_class_data_; }

void PwriteResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PwriteResp *>(to)->MergeFrom(
      static_cast<const PwriteResp &>(from));
}


void PwriteResp::MergeFrom(const PwriteResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.PwriteResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PwriteResp::CopyFrom(const PwriteResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.PwriteResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PwriteResp::IsInitialized() const {
  return true;
}

void PwriteResp::InternalSwap(PwriteResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PwriteResp, err_no_)
      + sizeof(PwriteResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(PwriteResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PwriteResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[7]);
}

// ===================================================================

class PreadReq::_Internal {
 public:
};

PreadReq::PreadReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.PreadReq)
}
PreadReq::PreadReq(const PreadReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.PreadReq)
}

inline void PreadReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
}

PreadReq::~PreadReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.PreadReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreadReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreadReq::ArenaDtor(void* object) {
  PreadReq* _this = reinterpret_cast< PreadReq* >(object);
  (void)_this;
}
void PreadReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreadReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreadReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.PreadReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreadReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreadReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.PreadReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fd(), target);
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_size(), target);
  }

  // uint64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.PreadReq)
  return target;
}

size_t PreadReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.PreadReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // uint64 size = 3;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_size());
  }

  // uint64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_offset());
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreadReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreadReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreadReq::GetClassData() const { return &_class_data_; }

void PreadReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreadReq *>(to)->MergeFrom(
      static_cast<const PreadReq &>(from));
}


void PreadReq::MergeFrom(const PreadReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.PreadReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreadReq::CopyFrom(const PreadReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.PreadReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreadReq::IsInitialized() const {
  return true;
}

void PreadReq::InternalSwap(PreadReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreadReq, fd_)
      + sizeof(PreadReq::fd_)
      - PROTOBUF_FIELD_OFFSET(PreadReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreadReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[8]);
}

// ===================================================================

class PreadResp::_Internal {
 public:
};

PreadResp::PreadResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.PreadResp)
}
PreadResp::PreadResp(const PreadResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_buf().empty()) {
    buf_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_buf(),
      GetArenaForAllocation());
  }
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.PreadResp)
}

inline void PreadResp::SharedCtor() {
buf_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  buf_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

PreadResp::~PreadResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.PreadResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PreadResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  buf_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PreadResp::ArenaDtor(void* object) {
  PreadResp* _this = reinterpret_cast< PreadResp* >(object);
  (void)_this;
}
void PreadResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PreadResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PreadResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.PreadResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buf_.ClearToEmpty();
  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreadResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes buf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_buf();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreadResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.PreadResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  // bytes buf = 3;
  if (!this->_internal_buf().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_buf(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.PreadResp)
  return target;
}

size_t PreadResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.PreadResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes buf = 3;
  if (!this->_internal_buf().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_buf());
  }

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreadResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PreadResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreadResp::GetClassData() const { return &_class_data_; }

void PreadResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PreadResp *>(to)->MergeFrom(
      static_cast<const PreadResp &>(from));
}


void PreadResp::MergeFrom(const PreadResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.PreadResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_buf().empty()) {
    _internal_set_buf(from._internal_buf());
  }
  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreadResp::CopyFrom(const PreadResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.PreadResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreadResp::IsInitialized() const {
  return true;
}

void PreadResp::InternalSwap(PreadResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &buf_, lhs_arena,
      &other->buf_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreadResp, err_no_)
      + sizeof(PreadResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(PreadResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreadResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[9]);
}

// ===================================================================

class FallocateReq::_Internal {
 public:
};

FallocateReq::FallocateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.FallocateReq)
}
FallocateReq::FallocateReq(const FallocateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(len_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.FallocateReq)
}

inline void FallocateReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&len_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(len_));
}

FallocateReq::~FallocateReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.FallocateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FallocateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FallocateReq::ArenaDtor(void* object) {
  FallocateReq* _this = reinterpret_cast< FallocateReq* >(object);
  (void)_this;
}
void FallocateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FallocateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FallocateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.FallocateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&len_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FallocateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 len = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FallocateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.FallocateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fd(), target);
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mode(), target);
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_offset(), target);
  }

  // int64 len = 5;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.FallocateReq)
  return target;
}

size_t FallocateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.FallocateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  // int32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // int64 offset = 4;
  if (this->_internal_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_offset());
  }

  // int64 len = 5;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_len());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FallocateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FallocateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FallocateReq::GetClassData() const { return &_class_data_; }

void FallocateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FallocateReq *>(to)->MergeFrom(
      static_cast<const FallocateReq &>(from));
}


void FallocateReq::MergeFrom(const FallocateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.FallocateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FallocateReq::CopyFrom(const FallocateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.FallocateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallocateReq::IsInitialized() const {
  return true;
}

void FallocateReq::InternalSwap(FallocateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FallocateReq, len_)
      + sizeof(FallocateReq::len_)
      - PROTOBUF_FIELD_OFFSET(FallocateReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FallocateReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[10]);
}

// ===================================================================

class FallocateResp::_Internal {
 public:
};

FallocateResp::FallocateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.FallocateResp)
}
FallocateResp::FallocateResp(const FallocateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.FallocateResp)
}

inline void FallocateResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

FallocateResp::~FallocateResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.FallocateResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FallocateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FallocateResp::ArenaDtor(void* object) {
  FallocateResp* _this = reinterpret_cast< FallocateResp* >(object);
  (void)_this;
}
void FallocateResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FallocateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FallocateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.FallocateResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FallocateResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FallocateResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.FallocateResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.FallocateResp)
  return target;
}

size_t FallocateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.FallocateResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FallocateResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FallocateResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FallocateResp::GetClassData() const { return &_class_data_; }

void FallocateResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FallocateResp *>(to)->MergeFrom(
      static_cast<const FallocateResp &>(from));
}


void FallocateResp::MergeFrom(const FallocateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.FallocateResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FallocateResp::CopyFrom(const FallocateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.FallocateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FallocateResp::IsInitialized() const {
  return true;
}

void FallocateResp::InternalSwap(FallocateResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FallocateResp, err_no_)
      + sizeof(FallocateResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(FallocateResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FallocateResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[11]);
}

// ===================================================================

class FtruncateReq::_Internal {
 public:
};

FtruncateReq::FtruncateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.FtruncateReq)
}
FtruncateReq::FtruncateReq(const FtruncateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.FtruncateReq)
}

inline void FtruncateReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
}

FtruncateReq::~FtruncateReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.FtruncateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FtruncateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtruncateReq::ArenaDtor(void* object) {
  FtruncateReq* _this = reinterpret_cast< FtruncateReq* >(object);
  (void)_this;
}
void FtruncateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtruncateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtruncateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.FtruncateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtruncateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtruncateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.FtruncateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fd(), target);
  }

  // int64 len = 3;
  if (this->_internal_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.FtruncateReq)
  return target;
}

size_t FtruncateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.FtruncateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int64 len = 3;
  if (this->_internal_len() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_len());
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtruncateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FtruncateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtruncateReq::GetClassData() const { return &_class_data_; }

void FtruncateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FtruncateReq *>(to)->MergeFrom(
      static_cast<const FtruncateReq &>(from));
}


void FtruncateReq::MergeFrom(const FtruncateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.FtruncateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_len() != 0) {
    _internal_set_len(from._internal_len());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtruncateReq::CopyFrom(const FtruncateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.FtruncateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtruncateReq::IsInitialized() const {
  return true;
}

void FtruncateReq::InternalSwap(FtruncateReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtruncateReq, fd_)
      + sizeof(FtruncateReq::fd_)
      - PROTOBUF_FIELD_OFFSET(FtruncateReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FtruncateReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[12]);
}

// ===================================================================

class FtruncateResp::_Internal {
 public:
};

FtruncateResp::FtruncateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.FtruncateResp)
}
FtruncateResp::FtruncateResp(const FtruncateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.FtruncateResp)
}

inline void FtruncateResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

FtruncateResp::~FtruncateResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.FtruncateResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FtruncateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FtruncateResp::ArenaDtor(void* object) {
  FtruncateResp* _this = reinterpret_cast< FtruncateResp* >(object);
  (void)_this;
}
void FtruncateResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FtruncateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FtruncateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.FtruncateResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FtruncateResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FtruncateResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.FtruncateResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.FtruncateResp)
  return target;
}

size_t FtruncateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.FtruncateResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FtruncateResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FtruncateResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FtruncateResp::GetClassData() const { return &_class_data_; }

void FtruncateResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FtruncateResp *>(to)->MergeFrom(
      static_cast<const FtruncateResp &>(from));
}


void FtruncateResp::MergeFrom(const FtruncateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.FtruncateResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FtruncateResp::CopyFrom(const FtruncateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.FtruncateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FtruncateResp::IsInitialized() const {
  return true;
}

void FtruncateResp::InternalSwap(FtruncateResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FtruncateResp, err_no_)
      + sizeof(FtruncateResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(FtruncateResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FtruncateResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[13]);
}

// ===================================================================

class ScanDirReq::_Internal {
 public:
};

ScanDirReq::ScanDirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.ScanDirReq)
}
ScanDirReq::ScanDirReq(const ScanDirReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dirname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dirname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dirname().empty()) {
    dirname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dirname(),
      GetArenaForAllocation());
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&req_type_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(req_type_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.ScanDirReq)
}

inline void ScanDirReq::SharedCtor() {
dirname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dirname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_type_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(req_type_));
}

ScanDirReq::~ScanDirReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.ScanDirReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScanDirReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dirname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScanDirReq::ArenaDtor(void* object) {
  ScanDirReq* _this = reinterpret_cast< ScanDirReq* >(object);
  (void)_this;
}
void ScanDirReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanDirReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScanDirReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.ScanDirReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirname_.ClearToEmpty();
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&req_type_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(req_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanDirReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dirname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dirname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.ScanDirReq.dirname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 req_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          req_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScanDirReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.ScanDirReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string dirname = 2;
  if (!this->_internal_dirname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dirname().data(), static_cast<int>(this->_internal_dirname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.ScanDirReq.dirname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dirname(), target);
  }

  // int32 req_type = 3;
  if (this->_internal_req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_req_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.ScanDirReq)
  return target;
}

size_t ScanDirReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.ScanDirReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dirname = 2;
  if (!this->_internal_dirname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dirname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int32 req_type = 3;
  if (this->_internal_req_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScanDirReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScanDirReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScanDirReq::GetClassData() const { return &_class_data_; }

void ScanDirReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScanDirReq *>(to)->MergeFrom(
      static_cast<const ScanDirReq &>(from));
}


void ScanDirReq::MergeFrom(const ScanDirReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.ScanDirReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dirname().empty()) {
    _internal_set_dirname(from._internal_dirname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScanDirReq::CopyFrom(const ScanDirReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.ScanDirReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanDirReq::IsInitialized() const {
  return true;
}

void ScanDirReq::InternalSwap(ScanDirReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dirname_, lhs_arena,
      &other->dirname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanDirReq, req_type_)
      + sizeof(ScanDirReq::req_type_)
      - PROTOBUF_FIELD_OFFSET(ScanDirReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanDirReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[14]);
}

// ===================================================================

class ScanDirResp1::_Internal {
 public:
};

ScanDirResp1::ScanDirResp1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.ScanDirResp1)
}
ScanDirResp1::ScanDirResp1(const ScanDirResp1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.ScanDirResp1)
}

inline void ScanDirResp1::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

ScanDirResp1::~ScanDirResp1() {
  // @@protoc_insertion_point(destructor:newlogstorepb.ScanDirResp1)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScanDirResp1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScanDirResp1::ArenaDtor(void* object) {
  ScanDirResp1* _this = reinterpret_cast< ScanDirResp1* >(object);
  (void)_this;
}
void ScanDirResp1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanDirResp1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScanDirResp1::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.ScanDirResp1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanDirResp1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScanDirResp1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.ScanDirResp1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.ScanDirResp1)
  return target;
}

size_t ScanDirResp1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.ScanDirResp1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScanDirResp1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScanDirResp1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScanDirResp1::GetClassData() const { return &_class_data_; }

void ScanDirResp1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScanDirResp1 *>(to)->MergeFrom(
      static_cast<const ScanDirResp1 &>(from));
}


void ScanDirResp1::MergeFrom(const ScanDirResp1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.ScanDirResp1)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScanDirResp1::CopyFrom(const ScanDirResp1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.ScanDirResp1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanDirResp1::IsInitialized() const {
  return true;
}

void ScanDirResp1::InternalSwap(ScanDirResp1* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanDirResp1, err_no_)
      + sizeof(ScanDirResp1::err_no_)
      - PROTOBUF_FIELD_OFFSET(ScanDirResp1, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanDirResp1::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[15]);
}

// ===================================================================

class ScanDirResp::_Internal {
 public:
  static const ::newlogstorepb::ScanDirResp1& resp1(const ScanDirResp* msg);
};

const ::newlogstorepb::ScanDirResp1&
ScanDirResp::_Internal::resp1(const ScanDirResp* msg) {
  return *msg->resp1_;
}
ScanDirResp::ScanDirResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.ScanDirResp)
}
ScanDirResp::ScanDirResp(const ScanDirResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resp1()) {
    resp1_ = new ::newlogstorepb::ScanDirResp1(*from.resp1_);
  } else {
    resp1_ = nullptr;
  }
  req_type_ = from.req_type_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.ScanDirResp)
}

inline void ScanDirResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&resp1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&req_type_) -
    reinterpret_cast<char*>(&resp1_)) + sizeof(req_type_));
}

ScanDirResp::~ScanDirResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.ScanDirResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScanDirResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete resp1_;
}

void ScanDirResp::ArenaDtor(void* object) {
  ScanDirResp* _this = reinterpret_cast< ScanDirResp* >(object);
  (void)_this;
}
void ScanDirResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScanDirResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScanDirResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.ScanDirResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && resp1_ != nullptr) {
    delete resp1_;
  }
  resp1_ = nullptr;
  req_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScanDirResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 req_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          req_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .newlogstorepb.ScanDirResp1 resp1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resp1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScanDirResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.ScanDirResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 req_type = 1;
  if (this->_internal_req_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_req_type(), target);
  }

  // .newlogstorepb.ScanDirResp1 resp1 = 2;
  if (this->_internal_has_resp1()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resp1(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.ScanDirResp)
  return target;
}

size_t ScanDirResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.ScanDirResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .newlogstorepb.ScanDirResp1 resp1 = 2;
  if (this->_internal_has_resp1()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resp1_);
  }

  // int32 req_type = 1;
  if (this->_internal_req_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_req_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScanDirResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScanDirResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScanDirResp::GetClassData() const { return &_class_data_; }

void ScanDirResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScanDirResp *>(to)->MergeFrom(
      static_cast<const ScanDirResp &>(from));
}


void ScanDirResp::MergeFrom(const ScanDirResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.ScanDirResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_resp1()) {
    _internal_mutable_resp1()->::newlogstorepb::ScanDirResp1::MergeFrom(from._internal_resp1());
  }
  if (from._internal_req_type() != 0) {
    _internal_set_req_type(from._internal_req_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScanDirResp::CopyFrom(const ScanDirResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.ScanDirResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScanDirResp::IsInitialized() const {
  return true;
}

void ScanDirResp::InternalSwap(ScanDirResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScanDirResp, req_type_)
      + sizeof(ScanDirResp::req_type_)
      - PROTOBUF_FIELD_OFFSET(ScanDirResp, resp1_)>(
          reinterpret_cast<char*>(&resp1_),
          reinterpret_cast<char*>(&other->resp1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScanDirResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[16]);
}

// ===================================================================

class UnlinkReq::_Internal {
 public:
};

UnlinkReq::UnlinkReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.UnlinkReq)
}
UnlinkReq::UnlinkReq(const UnlinkReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    pathname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pathname(),
      GetArenaForAllocation());
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.UnlinkReq)
}

inline void UnlinkReq::SharedCtor() {
pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
epoch_ = int64_t{0};
}

UnlinkReq::~UnlinkReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.UnlinkReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnlinkReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnlinkReq::ArenaDtor(void* object) {
  UnlinkReq* _this = reinterpret_cast< UnlinkReq* >(object);
  (void)_this;
}
void UnlinkReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlinkReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnlinkReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.UnlinkReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmpty();
  epoch_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlinkReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pathname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pathname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.UnlinkReq.pathname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnlinkReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.UnlinkReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.UnlinkReq.pathname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.UnlinkReq)
  return target;
}

size_t UnlinkReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.UnlinkReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlinkReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnlinkReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlinkReq::GetClassData() const { return &_class_data_; }

void UnlinkReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnlinkReq *>(to)->MergeFrom(
      static_cast<const UnlinkReq &>(from));
}


void UnlinkReq::MergeFrom(const UnlinkReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.UnlinkReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnlinkReq::CopyFrom(const UnlinkReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.UnlinkReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkReq::IsInitialized() const {
  return true;
}

void UnlinkReq::InternalSwap(UnlinkReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pathname_, lhs_arena,
      &other->pathname_, rhs_arena
  );
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlinkReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[17]);
}

// ===================================================================

class UnlinkResp::_Internal {
 public:
};

UnlinkResp::UnlinkResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.UnlinkResp)
}
UnlinkResp::UnlinkResp(const UnlinkResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.UnlinkResp)
}

inline void UnlinkResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

UnlinkResp::~UnlinkResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.UnlinkResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnlinkResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UnlinkResp::ArenaDtor(void* object) {
  UnlinkResp* _this = reinterpret_cast< UnlinkResp* >(object);
  (void)_this;
}
void UnlinkResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnlinkResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnlinkResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.UnlinkResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnlinkResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnlinkResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.UnlinkResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.UnlinkResp)
  return target;
}

size_t UnlinkResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.UnlinkResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnlinkResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnlinkResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnlinkResp::GetClassData() const { return &_class_data_; }

void UnlinkResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnlinkResp *>(to)->MergeFrom(
      static_cast<const UnlinkResp &>(from));
}


void UnlinkResp::MergeFrom(const UnlinkResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.UnlinkResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnlinkResp::CopyFrom(const UnlinkResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.UnlinkResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkResp::IsInitialized() const {
  return true;
}

void UnlinkResp::InternalSwap(UnlinkResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnlinkResp, err_no_)
      + sizeof(UnlinkResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(UnlinkResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlinkResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[18]);
}

// ===================================================================

class MkdirReq::_Internal {
 public:
};

MkdirReq::MkdirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.MkdirReq)
}
MkdirReq::MkdirReq(const MkdirReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    pathname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pathname(),
      GetArenaForAllocation());
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.MkdirReq)
}

inline void MkdirReq::SharedCtor() {
pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(mode_));
}

MkdirReq::~MkdirReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.MkdirReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MkdirReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MkdirReq::ArenaDtor(void* object) {
  MkdirReq* _this = reinterpret_cast< MkdirReq* >(object);
  (void)_this;
}
void MkdirReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MkdirReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MkdirReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.MkdirReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmpty();
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MkdirReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pathname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pathname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.MkdirReq.pathname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MkdirReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.MkdirReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.MkdirReq.pathname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pathname(), target);
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.MkdirReq)
  return target;
}

size_t MkdirReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.MkdirReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // uint32 mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MkdirReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirReq::GetClassData() const { return &_class_data_; }

void MkdirReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MkdirReq *>(to)->MergeFrom(
      static_cast<const MkdirReq &>(from));
}


void MkdirReq::MergeFrom(const MkdirReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.MkdirReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MkdirReq::CopyFrom(const MkdirReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.MkdirReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirReq::IsInitialized() const {
  return true;
}

void MkdirReq::InternalSwap(MkdirReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pathname_, lhs_arena,
      &other->pathname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MkdirReq, mode_)
      + sizeof(MkdirReq::mode_)
      - PROTOBUF_FIELD_OFFSET(MkdirReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[19]);
}

// ===================================================================

class MkdirResp::_Internal {
 public:
};

MkdirResp::MkdirResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.MkdirResp)
}
MkdirResp::MkdirResp(const MkdirResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.MkdirResp)
}

inline void MkdirResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

MkdirResp::~MkdirResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.MkdirResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MkdirResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MkdirResp::ArenaDtor(void* object) {
  MkdirResp* _this = reinterpret_cast< MkdirResp* >(object);
  (void)_this;
}
void MkdirResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MkdirResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MkdirResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.MkdirResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MkdirResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MkdirResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.MkdirResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.MkdirResp)
  return target;
}

size_t MkdirResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.MkdirResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MkdirResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MkdirResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MkdirResp::GetClassData() const { return &_class_data_; }

void MkdirResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MkdirResp *>(to)->MergeFrom(
      static_cast<const MkdirResp &>(from));
}


void MkdirResp::MergeFrom(const MkdirResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.MkdirResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MkdirResp::CopyFrom(const MkdirResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.MkdirResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkdirResp::IsInitialized() const {
  return true;
}

void MkdirResp::InternalSwap(MkdirResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MkdirResp, err_no_)
      + sizeof(MkdirResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(MkdirResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MkdirResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[20]);
}

// ===================================================================

class RmdirReq::_Internal {
 public:
};

RmdirReq::RmdirReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.RmdirReq)
}
RmdirReq::RmdirReq(const RmdirReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    pathname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pathname(),
      GetArenaForAllocation());
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.RmdirReq)
}

inline void RmdirReq::SharedCtor() {
pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
epoch_ = int64_t{0};
}

RmdirReq::~RmdirReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.RmdirReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RmdirReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RmdirReq::ArenaDtor(void* object) {
  RmdirReq* _this = reinterpret_cast< RmdirReq* >(object);
  (void)_this;
}
void RmdirReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RmdirReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RmdirReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.RmdirReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmpty();
  epoch_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RmdirReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pathname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pathname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.RmdirReq.pathname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RmdirReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.RmdirReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.RmdirReq.pathname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.RmdirReq)
  return target;
}

size_t RmdirReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.RmdirReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RmdirReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RmdirReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RmdirReq::GetClassData() const { return &_class_data_; }

void RmdirReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RmdirReq *>(to)->MergeFrom(
      static_cast<const RmdirReq &>(from));
}


void RmdirReq::MergeFrom(const RmdirReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.RmdirReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RmdirReq::CopyFrom(const RmdirReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.RmdirReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmdirReq::IsInitialized() const {
  return true;
}

void RmdirReq::InternalSwap(RmdirReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pathname_, lhs_arena,
      &other->pathname_, rhs_arena
  );
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RmdirReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[21]);
}

// ===================================================================

class RmdirResp::_Internal {
 public:
};

RmdirResp::RmdirResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.RmdirResp)
}
RmdirResp::RmdirResp(const RmdirResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.RmdirResp)
}

inline void RmdirResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

RmdirResp::~RmdirResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.RmdirResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RmdirResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RmdirResp::ArenaDtor(void* object) {
  RmdirResp* _this = reinterpret_cast< RmdirResp* >(object);
  (void)_this;
}
void RmdirResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RmdirResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RmdirResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.RmdirResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RmdirResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RmdirResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.RmdirResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.RmdirResp)
  return target;
}

size_t RmdirResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.RmdirResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RmdirResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RmdirResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RmdirResp::GetClassData() const { return &_class_data_; }

void RmdirResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RmdirResp *>(to)->MergeFrom(
      static_cast<const RmdirResp &>(from));
}


void RmdirResp::MergeFrom(const RmdirResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.RmdirResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RmdirResp::CopyFrom(const RmdirResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.RmdirResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmdirResp::IsInitialized() const {
  return true;
}

void RmdirResp::InternalSwap(RmdirResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RmdirResp, err_no_)
      + sizeof(RmdirResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(RmdirResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RmdirResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[22]);
}

// ===================================================================

class StatReq::_Internal {
 public:
};

StatReq::StatReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.StatReq)
}
StatReq::StatReq(const StatReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pathname().empty()) {
    pathname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pathname(),
      GetArenaForAllocation());
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.StatReq)
}

inline void StatReq::SharedCtor() {
pathname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pathname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
epoch_ = int64_t{0};
}

StatReq::~StatReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.StatReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pathname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StatReq::ArenaDtor(void* object) {
  StatReq* _this = reinterpret_cast< StatReq* >(object);
  (void)_this;
}
void StatReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.StatReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pathname_.ClearToEmpty();
  epoch_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pathname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pathname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.StatReq.pathname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.StatReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pathname().data(), static_cast<int>(this->_internal_pathname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.StatReq.pathname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pathname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.StatReq)
  return target;
}

size_t StatReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.StatReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string pathname = 2;
  if (!this->_internal_pathname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pathname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatReq::GetClassData() const { return &_class_data_; }

void StatReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatReq *>(to)->MergeFrom(
      static_cast<const StatReq &>(from));
}


void StatReq::MergeFrom(const StatReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.StatReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_pathname().empty()) {
    _internal_set_pathname(from._internal_pathname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatReq::CopyFrom(const StatReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.StatReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatReq::IsInitialized() const {
  return true;
}

void StatReq::InternalSwap(StatReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pathname_, lhs_arena,
      &other->pathname_, rhs_arena
  );
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StatReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[23]);
}

// ===================================================================

class StatResp::_Internal {
 public:
};

StatResp::StatResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.StatResp)
}
StatResp::StatResp(const StatResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&st_size_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(st_size_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.StatResp)
}

inline void StatResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&st_size_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(st_size_));
}

StatResp::~StatResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.StatResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StatResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StatResp::ArenaDtor(void* object) {
  StatResp* _this = reinterpret_cast< StatResp* >(object);
  (void)_this;
}
void StatResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StatResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StatResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.StatResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&st_size_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(st_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StatResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_dir_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 st_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          st_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StatResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.StatResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  // bool is_dir = 3;
  if (this->_internal_is_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_dir(), target);
  }

  // uint64 st_size = 4;
  if (this->_internal_st_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_st_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.StatResp)
  return target;
}

size_t StatResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.StatResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  // bool is_dir = 3;
  if (this->_internal_is_dir() != 0) {
    total_size += 1 + 1;
  }

  // uint64 st_size = 4;
  if (this->_internal_st_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_st_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StatResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StatResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StatResp::GetClassData() const { return &_class_data_; }

void StatResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StatResp *>(to)->MergeFrom(
      static_cast<const StatResp &>(from));
}


void StatResp::MergeFrom(const StatResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.StatResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  if (from._internal_is_dir() != 0) {
    _internal_set_is_dir(from._internal_is_dir());
  }
  if (from._internal_st_size() != 0) {
    _internal_set_st_size(from._internal_st_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StatResp::CopyFrom(const StatResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.StatResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatResp::IsInitialized() const {
  return true;
}

void StatResp::InternalSwap(StatResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StatResp, st_size_)
      + sizeof(StatResp::st_size_)
      - PROTOBUF_FIELD_OFFSET(StatResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StatResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[24]);
}

// ===================================================================

class RenameReq::_Internal {
 public:
};

RenameReq::RenameReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.RenameReq)
}
RenameReq::RenameReq(const RenameReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oldpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oldpath().empty()) {
    oldpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oldpath(),
      GetArenaForAllocation());
  }
  newpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    newpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_newpath().empty()) {
    newpath_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_newpath(),
      GetArenaForAllocation());
  }
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.RenameReq)
}

inline void RenameReq::SharedCtor() {
oldpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oldpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
newpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  newpath_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
epoch_ = int64_t{0};
}

RenameReq::~RenameReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.RenameReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenameReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  oldpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  newpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RenameReq::ArenaDtor(void* object) {
  RenameReq* _this = reinterpret_cast< RenameReq* >(object);
  (void)_this;
}
void RenameReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenameReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.RenameReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  oldpath_.ClearToEmpty();
  newpath_.ClearToEmpty();
  epoch_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string oldpath = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oldpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.RenameReq.oldpath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string newpath = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_newpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.RenameReq.newpath"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.RenameReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string oldpath = 2;
  if (!this->_internal_oldpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oldpath().data(), static_cast<int>(this->_internal_oldpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.RenameReq.oldpath");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldpath(), target);
  }

  // string newpath = 3;
  if (!this->_internal_newpath().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_newpath().data(), static_cast<int>(this->_internal_newpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.RenameReq.newpath");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_newpath(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.RenameReq)
  return target;
}

size_t RenameReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.RenameReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string oldpath = 2;
  if (!this->_internal_oldpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oldpath());
  }

  // string newpath = 3;
  if (!this->_internal_newpath().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newpath());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenameReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameReq::GetClassData() const { return &_class_data_; }

void RenameReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RenameReq *>(to)->MergeFrom(
      static_cast<const RenameReq &>(from));
}


void RenameReq::MergeFrom(const RenameReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.RenameReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_oldpath().empty()) {
    _internal_set_oldpath(from._internal_oldpath());
  }
  if (!from._internal_newpath().empty()) {
    _internal_set_newpath(from._internal_newpath());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameReq::CopyFrom(const RenameReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.RenameReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameReq::IsInitialized() const {
  return true;
}

void RenameReq::InternalSwap(RenameReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oldpath_, lhs_arena,
      &other->oldpath_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &newpath_, lhs_arena,
      &other->newpath_, rhs_arena
  );
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[25]);
}

// ===================================================================

class RenameResp::_Internal {
 public:
};

RenameResp::RenameResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.RenameResp)
}
RenameResp::RenameResp(const RenameResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.RenameResp)
}

inline void RenameResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

RenameResp::~RenameResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.RenameResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RenameResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RenameResp::ArenaDtor(void* object) {
  RenameResp* _this = reinterpret_cast< RenameResp* >(object);
  (void)_this;
}
void RenameResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenameResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenameResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.RenameResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenameResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenameResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.RenameResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.RenameResp)
  return target;
}

size_t RenameResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.RenameResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenameResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenameResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenameResp::GetClassData() const { return &_class_data_; }

void RenameResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RenameResp *>(to)->MergeFrom(
      static_cast<const RenameResp &>(from));
}


void RenameResp::MergeFrom(const RenameResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.RenameResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenameResp::CopyFrom(const RenameResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.RenameResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameResp::IsInitialized() const {
  return true;
}

void RenameResp::InternalSwap(RenameResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenameResp, err_no_)
      + sizeof(RenameResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(RenameResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenameResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[26]);
}

// ===================================================================

class FsyncReq::_Internal {
 public:
};

FsyncReq::FsyncReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.FsyncReq)
}
FsyncReq::FsyncReq(const FsyncReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.FsyncReq)
}

inline void FsyncReq::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fd_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
}

FsyncReq::~FsyncReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.FsyncReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FsyncReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FsyncReq::ArenaDtor(void* object) {
  FsyncReq* _this = reinterpret_cast< FsyncReq* >(object);
  (void)_this;
}
void FsyncReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FsyncReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FsyncReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.FsyncReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fd_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(fd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FsyncReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 fd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FsyncReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.FsyncReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_fd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.FsyncReq)
  return target;
}

size_t FsyncReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.FsyncReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int32 fd = 2;
  if (this->_internal_fd() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_fd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FsyncReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FsyncReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FsyncReq::GetClassData() const { return &_class_data_; }

void FsyncReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FsyncReq *>(to)->MergeFrom(
      static_cast<const FsyncReq &>(from));
}


void FsyncReq::MergeFrom(const FsyncReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.FsyncReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_fd() != 0) {
    _internal_set_fd(from._internal_fd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FsyncReq::CopyFrom(const FsyncReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.FsyncReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsyncReq::IsInitialized() const {
  return true;
}

void FsyncReq::InternalSwap(FsyncReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FsyncReq, fd_)
      + sizeof(FsyncReq::fd_)
      - PROTOBUF_FIELD_OFFSET(FsyncReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FsyncReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[27]);
}

// ===================================================================

class FsyncResp::_Internal {
 public:
};

FsyncResp::FsyncResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.FsyncResp)
}
FsyncResp::FsyncResp(const FsyncResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.FsyncResp)
}

inline void FsyncResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

FsyncResp::~FsyncResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.FsyncResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FsyncResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FsyncResp::ArenaDtor(void* object) {
  FsyncResp* _this = reinterpret_cast< FsyncResp* >(object);
  (void)_this;
}
void FsyncResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FsyncResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FsyncResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.FsyncResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FsyncResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FsyncResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.FsyncResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.FsyncResp)
  return target;
}

size_t FsyncResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.FsyncResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FsyncResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FsyncResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FsyncResp::GetClassData() const { return &_class_data_; }

void FsyncResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FsyncResp *>(to)->MergeFrom(
      static_cast<const FsyncResp &>(from));
}


void FsyncResp::MergeFrom(const FsyncResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.FsyncResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FsyncResp::CopyFrom(const FsyncResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.FsyncResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FsyncResp::IsInitialized() const {
  return true;
}

void FsyncResp::InternalSwap(FsyncResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FsyncResp, err_no_)
      + sizeof(FsyncResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(FsyncResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FsyncResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[28]);
}

// ===================================================================

class GetLogStoreInfoReq::_Internal {
 public:
};

GetLogStoreInfoReq::GetLogStoreInfoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.GetLogStoreInfoReq)
}
GetLogStoreInfoReq::GetLogStoreInfoReq(const GetLogStoreInfoReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  epoch_ = from.epoch_;
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.GetLogStoreInfoReq)
}

inline void GetLogStoreInfoReq::SharedCtor() {
epoch_ = int64_t{0};
}

GetLogStoreInfoReq::~GetLogStoreInfoReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.GetLogStoreInfoReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLogStoreInfoReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLogStoreInfoReq::ArenaDtor(void* object) {
  GetLogStoreInfoReq* _this = reinterpret_cast< GetLogStoreInfoReq* >(object);
  (void)_this;
}
void GetLogStoreInfoReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLogStoreInfoReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLogStoreInfoReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.GetLogStoreInfoReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epoch_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLogStoreInfoReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLogStoreInfoReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.GetLogStoreInfoReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.GetLogStoreInfoReq)
  return target;
}

size_t GetLogStoreInfoReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.GetLogStoreInfoReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLogStoreInfoReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLogStoreInfoReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLogStoreInfoReq::GetClassData() const { return &_class_data_; }

void GetLogStoreInfoReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLogStoreInfoReq *>(to)->MergeFrom(
      static_cast<const GetLogStoreInfoReq &>(from));
}


void GetLogStoreInfoReq::MergeFrom(const GetLogStoreInfoReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.GetLogStoreInfoReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogStoreInfoReq::CopyFrom(const GetLogStoreInfoReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.GetLogStoreInfoReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogStoreInfoReq::IsInitialized() const {
  return true;
}

void GetLogStoreInfoReq::InternalSwap(GetLogStoreInfoReq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(epoch_, other->epoch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLogStoreInfoReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[29]);
}

// ===================================================================

class GetLogStoreInfoResp::_Internal {
 public:
};

GetLogStoreInfoResp::GetLogStoreInfoResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.GetLogStoreInfoResp)
}
GetLogStoreInfoResp::GetLogStoreInfoResp(const GetLogStoreInfoResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&shm_used_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(shm_used_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.GetLogStoreInfoResp)
}

inline void GetLogStoreInfoResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&shm_used_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(shm_used_));
}

GetLogStoreInfoResp::~GetLogStoreInfoResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.GetLogStoreInfoResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetLogStoreInfoResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetLogStoreInfoResp::ArenaDtor(void* object) {
  GetLogStoreInfoResp* _this = reinterpret_cast< GetLogStoreInfoResp* >(object);
  (void)_this;
}
void GetLogStoreInfoResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLogStoreInfoResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetLogStoreInfoResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.GetLogStoreInfoResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&shm_used_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(shm_used_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLogStoreInfoResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_limit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_used = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          memory_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shm_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          shm_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shm_used = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          shm_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetLogStoreInfoResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.GetLogStoreInfoResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int64 memory_limit = 2;
  if (this->_internal_memory_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_memory_limit(), target);
  }

  // int64 memory_used = 3;
  if (this->_internal_memory_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_memory_used(), target);
  }

  // int64 shm_limit = 4;
  if (this->_internal_shm_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_shm_limit(), target);
  }

  // int64 shm_used = 5;
  if (this->_internal_shm_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_shm_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.GetLogStoreInfoResp)
  return target;
}

size_t GetLogStoreInfoResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.GetLogStoreInfoResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int64 memory_limit = 2;
  if (this->_internal_memory_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_memory_limit());
  }

  // int64 memory_used = 3;
  if (this->_internal_memory_used() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_memory_used());
  }

  // int64 shm_limit = 4;
  if (this->_internal_shm_limit() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_shm_limit());
  }

  // int64 shm_used = 5;
  if (this->_internal_shm_used() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_shm_used());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetLogStoreInfoResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetLogStoreInfoResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetLogStoreInfoResp::GetClassData() const { return &_class_data_; }

void GetLogStoreInfoResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetLogStoreInfoResp *>(to)->MergeFrom(
      static_cast<const GetLogStoreInfoResp &>(from));
}


void GetLogStoreInfoResp::MergeFrom(const GetLogStoreInfoResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.GetLogStoreInfoResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_memory_limit() != 0) {
    _internal_set_memory_limit(from._internal_memory_limit());
  }
  if (from._internal_memory_used() != 0) {
    _internal_set_memory_used(from._internal_memory_used());
  }
  if (from._internal_shm_limit() != 0) {
    _internal_set_shm_limit(from._internal_shm_limit());
  }
  if (from._internal_shm_used() != 0) {
    _internal_set_shm_used(from._internal_shm_used());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogStoreInfoResp::CopyFrom(const GetLogStoreInfoResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.GetLogStoreInfoResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLogStoreInfoResp::IsInitialized() const {
  return true;
}

void GetLogStoreInfoResp::InternalSwap(GetLogStoreInfoResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLogStoreInfoResp, shm_used_)
      + sizeof(GetLogStoreInfoResp::shm_used_)
      - PROTOBUF_FIELD_OFFSET(GetLogStoreInfoResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLogStoreInfoResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[30]);
}

// ===================================================================

class BatchFallocateReq::_Internal {
 public:
};

BatchFallocateReq::BatchFallocateReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.BatchFallocateReq)
}
BatchFallocateReq::BatchFallocateReq(const BatchFallocateReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dirname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dirname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dirname().empty()) {
    dirname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dirname(),
      GetArenaForAllocation());
  }
  ::memcpy(&epoch_, &from.epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.BatchFallocateReq)
}

inline void BatchFallocateReq::SharedCtor() {
dirname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dirname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(size_));
}

BatchFallocateReq::~BatchFallocateReq() {
  // @@protoc_insertion_point(destructor:newlogstorepb.BatchFallocateReq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchFallocateReq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dirname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BatchFallocateReq::ArenaDtor(void* object) {
  BatchFallocateReq* _this = reinterpret_cast< BatchFallocateReq* >(object);
  (void)_this;
}
void BatchFallocateReq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchFallocateReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchFallocateReq::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.BatchFallocateReq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dirname_.ClearToEmpty();
  ::memset(&epoch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&epoch_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchFallocateReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string dirname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dirname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "newlogstorepb.BatchFallocateReq.dirname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchFallocateReq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.BatchFallocateReq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_epoch(), target);
  }

  // string dirname = 2;
  if (!this->_internal_dirname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dirname().data(), static_cast<int>(this->_internal_dirname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "newlogstorepb.BatchFallocateReq.dirname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dirname(), target);
  }

  // int64 count = 3;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_count(), target);
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.BatchFallocateReq)
  return target;
}

size_t BatchFallocateReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.BatchFallocateReq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dirname = 2;
  if (!this->_internal_dirname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dirname());
  }

  // int64 epoch = 1;
  if (this->_internal_epoch() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_epoch());
  }

  // int64 count = 3;
  if (this->_internal_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_count());
  }

  // int64 size = 4;
  if (this->_internal_size() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchFallocateReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchFallocateReq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchFallocateReq::GetClassData() const { return &_class_data_; }

void BatchFallocateReq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchFallocateReq *>(to)->MergeFrom(
      static_cast<const BatchFallocateReq &>(from));
}


void BatchFallocateReq::MergeFrom(const BatchFallocateReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.BatchFallocateReq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dirname().empty()) {
    _internal_set_dirname(from._internal_dirname());
  }
  if (from._internal_epoch() != 0) {
    _internal_set_epoch(from._internal_epoch());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchFallocateReq::CopyFrom(const BatchFallocateReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.BatchFallocateReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchFallocateReq::IsInitialized() const {
  return true;
}

void BatchFallocateReq::InternalSwap(BatchFallocateReq* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dirname_, lhs_arena,
      &other->dirname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchFallocateReq, size_)
      + sizeof(BatchFallocateReq::size_)
      - PROTOBUF_FIELD_OFFSET(BatchFallocateReq, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchFallocateReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[31]);
}

// ===================================================================

class BatchFallocateResp::_Internal {
 public:
};

BatchFallocateResp::BatchFallocateResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:newlogstorepb.BatchFallocateResp)
}
BatchFallocateResp::BatchFallocateResp(const BatchFallocateResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ret_code_, &from.ret_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  // @@protoc_insertion_point(copy_constructor:newlogstorepb.BatchFallocateResp)
}

inline void BatchFallocateResp::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ret_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&err_no_) -
    reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
}

BatchFallocateResp::~BatchFallocateResp() {
  // @@protoc_insertion_point(destructor:newlogstorepb.BatchFallocateResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BatchFallocateResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchFallocateResp::ArenaDtor(void* object) {
  BatchFallocateResp* _this = reinterpret_cast< BatchFallocateResp* >(object);
  (void)_this;
}
void BatchFallocateResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchFallocateResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchFallocateResp::Clear() {
// @@protoc_insertion_point(message_clear_start:newlogstorepb.BatchFallocateResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ret_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&err_no_) -
      reinterpret_cast<char*>(&ret_code_)) + sizeof(err_no_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchFallocateResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ret_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 err_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          err_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BatchFallocateResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:newlogstorepb.BatchFallocateResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ret_code(), target);
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_err_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:newlogstorepb.BatchFallocateResp)
  return target;
}

size_t BatchFallocateResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:newlogstorepb.BatchFallocateResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ret_code = 1;
  if (this->_internal_ret_code() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ret_code());
  }

  // int32 err_no = 2;
  if (this->_internal_err_no() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_err_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BatchFallocateResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BatchFallocateResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BatchFallocateResp::GetClassData() const { return &_class_data_; }

void BatchFallocateResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BatchFallocateResp *>(to)->MergeFrom(
      static_cast<const BatchFallocateResp &>(from));
}


void BatchFallocateResp::MergeFrom(const BatchFallocateResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:newlogstorepb.BatchFallocateResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ret_code() != 0) {
    _internal_set_ret_code(from._internal_ret_code());
  }
  if (from._internal_err_no() != 0) {
    _internal_set_err_no(from._internal_err_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BatchFallocateResp::CopyFrom(const BatchFallocateResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:newlogstorepb.BatchFallocateResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchFallocateResp::IsInitialized() const {
  return true;
}

void BatchFallocateResp::InternalSwap(BatchFallocateResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchFallocateResp, err_no_)
      + sizeof(BatchFallocateResp::err_no_)
      - PROTOBUF_FIELD_OFFSET(BatchFallocateResp, ret_code_)>(
          reinterpret_cast<char*>(&ret_code_),
          reinterpret_cast<char*>(&other->ret_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchFallocateResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_newlogstorepb_2eproto_getter, &descriptor_table_newlogstorepb_2eproto_once,
      file_level_metadata_newlogstorepb_2eproto[32]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace newlogstorepb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::newlogstorepb::LoadLogStoreReq* Arena::CreateMaybeMessage< ::newlogstorepb::LoadLogStoreReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::LoadLogStoreReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::LoadLogStoreResp* Arena::CreateMaybeMessage< ::newlogstorepb::LoadLogStoreResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::LoadLogStoreResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::OpenReq* Arena::CreateMaybeMessage< ::newlogstorepb::OpenReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::OpenReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::OpenResp* Arena::CreateMaybeMessage< ::newlogstorepb::OpenResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::OpenResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::CloseReq* Arena::CreateMaybeMessage< ::newlogstorepb::CloseReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::CloseReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::CloseResp* Arena::CreateMaybeMessage< ::newlogstorepb::CloseResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::CloseResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::PwriteReq* Arena::CreateMaybeMessage< ::newlogstorepb::PwriteReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::PwriteReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::PwriteResp* Arena::CreateMaybeMessage< ::newlogstorepb::PwriteResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::PwriteResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::PreadReq* Arena::CreateMaybeMessage< ::newlogstorepb::PreadReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::PreadReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::PreadResp* Arena::CreateMaybeMessage< ::newlogstorepb::PreadResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::PreadResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::FallocateReq* Arena::CreateMaybeMessage< ::newlogstorepb::FallocateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::FallocateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::FallocateResp* Arena::CreateMaybeMessage< ::newlogstorepb::FallocateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::FallocateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::FtruncateReq* Arena::CreateMaybeMessage< ::newlogstorepb::FtruncateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::FtruncateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::FtruncateResp* Arena::CreateMaybeMessage< ::newlogstorepb::FtruncateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::FtruncateResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::ScanDirReq* Arena::CreateMaybeMessage< ::newlogstorepb::ScanDirReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::ScanDirReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::ScanDirResp1* Arena::CreateMaybeMessage< ::newlogstorepb::ScanDirResp1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::ScanDirResp1 >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::ScanDirResp* Arena::CreateMaybeMessage< ::newlogstorepb::ScanDirResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::ScanDirResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::UnlinkReq* Arena::CreateMaybeMessage< ::newlogstorepb::UnlinkReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::UnlinkReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::UnlinkResp* Arena::CreateMaybeMessage< ::newlogstorepb::UnlinkResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::UnlinkResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::MkdirReq* Arena::CreateMaybeMessage< ::newlogstorepb::MkdirReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::MkdirReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::MkdirResp* Arena::CreateMaybeMessage< ::newlogstorepb::MkdirResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::MkdirResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::RmdirReq* Arena::CreateMaybeMessage< ::newlogstorepb::RmdirReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::RmdirReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::RmdirResp* Arena::CreateMaybeMessage< ::newlogstorepb::RmdirResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::RmdirResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::StatReq* Arena::CreateMaybeMessage< ::newlogstorepb::StatReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::StatReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::StatResp* Arena::CreateMaybeMessage< ::newlogstorepb::StatResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::StatResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::RenameReq* Arena::CreateMaybeMessage< ::newlogstorepb::RenameReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::RenameReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::RenameResp* Arena::CreateMaybeMessage< ::newlogstorepb::RenameResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::RenameResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::FsyncReq* Arena::CreateMaybeMessage< ::newlogstorepb::FsyncReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::FsyncReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::FsyncResp* Arena::CreateMaybeMessage< ::newlogstorepb::FsyncResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::FsyncResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::GetLogStoreInfoReq* Arena::CreateMaybeMessage< ::newlogstorepb::GetLogStoreInfoReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::GetLogStoreInfoReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::GetLogStoreInfoResp* Arena::CreateMaybeMessage< ::newlogstorepb::GetLogStoreInfoResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::GetLogStoreInfoResp >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::BatchFallocateReq* Arena::CreateMaybeMessage< ::newlogstorepb::BatchFallocateReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::BatchFallocateReq >(arena);
}
template<> PROTOBUF_NOINLINE ::newlogstorepb::BatchFallocateResp* Arena::CreateMaybeMessage< ::newlogstorepb::BatchFallocateResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::newlogstorepb::BatchFallocateResp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
