// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: newlogstorepb.proto

#include "newlogstorepb.pb.h"
#include "newlogstorepb.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/sync_stream.h>
#include <gmock/gmock.h>
namespace newlogstorepb {

class MockNewLogStoreStub : public NewLogStore::StubInterface {
 public:
  MOCK_METHOD3(LoadLogStore, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::LoadLogStoreReq& request, ::newlogstorepb::LoadLogStoreResp* response));
  MOCK_METHOD3(AsyncLoadLogStoreRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::LoadLogStoreResp>*(::grpc::ClientContext* context, const ::newlogstorepb::LoadLogStoreReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncLoadLogStoreRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::LoadLogStoreResp>*(::grpc::ClientContext* context, const ::newlogstorepb::LoadLogStoreReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Open, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::OpenReq& request, ::newlogstorepb::OpenResp* response));
  MOCK_METHOD3(AsyncOpenRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::OpenResp>*(::grpc::ClientContext* context, const ::newlogstorepb::OpenReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncOpenRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::OpenResp>*(::grpc::ClientContext* context, const ::newlogstorepb::OpenReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Close, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::CloseReq& request, ::newlogstorepb::CloseResp* response));
  MOCK_METHOD3(AsyncCloseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::CloseResp>*(::grpc::ClientContext* context, const ::newlogstorepb::CloseReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCloseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::CloseResp>*(::grpc::ClientContext* context, const ::newlogstorepb::CloseReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Pwrite, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::PwriteReq& request, ::newlogstorepb::PwriteResp* response));
  MOCK_METHOD3(AsyncPwriteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::PwriteResp>*(::grpc::ClientContext* context, const ::newlogstorepb::PwriteReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPwriteRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::PwriteResp>*(::grpc::ClientContext* context, const ::newlogstorepb::PwriteReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Pread, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::PreadReq& request, ::newlogstorepb::PreadResp* response));
  MOCK_METHOD3(AsyncPreadRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::PreadResp>*(::grpc::ClientContext* context, const ::newlogstorepb::PreadReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPreadRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::PreadResp>*(::grpc::ClientContext* context, const ::newlogstorepb::PreadReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Fallocate, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::FallocateReq& request, ::newlogstorepb::FallocateResp* response));
  MOCK_METHOD3(AsyncFallocateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::FallocateResp>*(::grpc::ClientContext* context, const ::newlogstorepb::FallocateReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFallocateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::FallocateResp>*(::grpc::ClientContext* context, const ::newlogstorepb::FallocateReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Ftruncate, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::FtruncateReq& request, ::newlogstorepb::FtruncateResp* response));
  MOCK_METHOD3(AsyncFtruncateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::FtruncateResp>*(::grpc::ClientContext* context, const ::newlogstorepb::FtruncateReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFtruncateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::FtruncateResp>*(::grpc::ClientContext* context, const ::newlogstorepb::FtruncateReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Scandir, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::ScanDirReq& request, ::newlogstorepb::ScanDirResp* response));
  MOCK_METHOD3(AsyncScandirRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::ScanDirResp>*(::grpc::ClientContext* context, const ::newlogstorepb::ScanDirReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncScandirRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::ScanDirResp>*(::grpc::ClientContext* context, const ::newlogstorepb::ScanDirReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Unlink, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::UnlinkReq& request, ::newlogstorepb::UnlinkResp* response));
  MOCK_METHOD3(AsyncUnlinkRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::UnlinkResp>*(::grpc::ClientContext* context, const ::newlogstorepb::UnlinkReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncUnlinkRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::UnlinkResp>*(::grpc::ClientContext* context, const ::newlogstorepb::UnlinkReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Mkdir, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::MkdirReq& request, ::newlogstorepb::MkdirResp* response));
  MOCK_METHOD3(AsyncMkdirRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::MkdirResp>*(::grpc::ClientContext* context, const ::newlogstorepb::MkdirReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncMkdirRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::MkdirResp>*(::grpc::ClientContext* context, const ::newlogstorepb::MkdirReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Rmdir, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::RmdirReq& request, ::newlogstorepb::RmdirResp* response));
  MOCK_METHOD3(AsyncRmdirRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::RmdirResp>*(::grpc::ClientContext* context, const ::newlogstorepb::RmdirReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRmdirRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::RmdirResp>*(::grpc::ClientContext* context, const ::newlogstorepb::RmdirReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Stat, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::StatReq& request, ::newlogstorepb::StatResp* response));
  MOCK_METHOD3(AsyncStatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::StatResp>*(::grpc::ClientContext* context, const ::newlogstorepb::StatReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncStatRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::StatResp>*(::grpc::ClientContext* context, const ::newlogstorepb::StatReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Rename, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::RenameReq& request, ::newlogstorepb::RenameResp* response));
  MOCK_METHOD3(AsyncRenameRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::RenameResp>*(::grpc::ClientContext* context, const ::newlogstorepb::RenameReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncRenameRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::RenameResp>*(::grpc::ClientContext* context, const ::newlogstorepb::RenameReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Fsync, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::FsyncReq& request, ::newlogstorepb::FsyncResp* response));
  MOCK_METHOD3(AsyncFsyncRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::FsyncResp>*(::grpc::ClientContext* context, const ::newlogstorepb::FsyncReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncFsyncRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::FsyncResp>*(::grpc::ClientContext* context, const ::newlogstorepb::FsyncReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetLogStoreInfo, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::GetLogStoreInfoReq& request, ::newlogstorepb::GetLogStoreInfoResp* response));
  MOCK_METHOD3(AsyncGetLogStoreInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::GetLogStoreInfoResp>*(::grpc::ClientContext* context, const ::newlogstorepb::GetLogStoreInfoReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetLogStoreInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::GetLogStoreInfoResp>*(::grpc::ClientContext* context, const ::newlogstorepb::GetLogStoreInfoReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(BatchFallocate, ::grpc::Status(::grpc::ClientContext* context, const ::newlogstorepb::BatchFallocateReq& request, ::newlogstorepb::BatchFallocateResp* response));
  MOCK_METHOD3(AsyncBatchFallocateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::BatchFallocateResp>*(::grpc::ClientContext* context, const ::newlogstorepb::BatchFallocateReq& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncBatchFallocateRaw, ::grpc::ClientAsyncResponseReaderInterface< ::newlogstorepb::BatchFallocateResp>*(::grpc::ClientContext* context, const ::newlogstorepb::BatchFallocateReq& request, ::grpc::CompletionQueue* cq));
};

} // namespace newlogstorepb
